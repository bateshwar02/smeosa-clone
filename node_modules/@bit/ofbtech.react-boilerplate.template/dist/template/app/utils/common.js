"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _dateformat = _interopRequireDefault(require("dateformat"));

var _crypto = _interopRequireDefault(require("crypto"));

var _constants = _interopRequireDefault(require("./constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Utils =
/*#__PURE__*/
function () {
  function Utils() {
    _classCallCheck(this, Utils);
  }

  _createClass(Utils, null, [{
    key: "getThumbS3Key",
    value: function getThumbS3Key(s3key) {
      if (this.isUndefinedOrNullOrEmpty(s3key)) {
        throw new Error('arg s3key is required');
      }

      var lastIndex = s3key.lastIndexOf('.');
      return "".concat(s3key.substring(0, lastIndex), "_thumb").concat(s3key.substring(lastIndex));
    }
  }, {
    key: "uniqueArray",
    value: function uniqueArray(arr) {
      var result = [];

      if (Utils.isUndefinedOrNullOrEmptyList(arr)) {
        return result;
      }

      for (var i = 0; i < arr.length; i += 1) {
        if (result.indexOf(arr[i]) === -1) {
          result.push(arr[i]);
        }
      }

      return result;
    }
  }, {
    key: "isBoolean",
    value: function isBoolean(value) {
      return typeof value === 'boolean';
    }
  }, {
    key: "isNumber",
    value: function isNumber(value) {
      return typeof value === 'number';
    }
  }, {
    key: "isFunction",
    value: function isFunction(value) {
      return typeof value === 'function';
    }
  }, {
    key: "isUndefined",
    value: function isUndefined(value) {
      return typeof value === 'undefined';
    }
  }, {
    key: "isNull",
    value: function isNull(value) {
      return value === null;
    }
  }, {
    key: "isEmpty",
    value: function isEmpty(value) {
      return value === '';
    }
  }, {
    key: "isEmptyList",
    value: function isEmptyList(value) {
      return value.constructor === Array && value.length === 0;
    }
  }, {
    key: "isEmptyObject",
    value: function isEmptyObject(value) {
      if (value === null) {
        return true;
      }

      if (Utils.isBoolean(value) || Utils.isNumber(value) || Utils.isFunction(value)) {
        return false;
      }

      if (value instanceof Set && !Utils.isUndefined(value.size) && value.size !== 0) {
        return false;
      }

      return Object.keys(value).length === 0;
    }
  }, {
    key: "isStringAndNotEmpty",
    value: function isStringAndNotEmpty(value) {
      return typeof value === 'string' && value !== '';
    }
  }, {
    key: "isObject",
    value: function isObject(value) {
      if (Utils.isUndefinedOrNullOrEmpty(value) || Utils.isString(value) || Array.isArray(value) || Utils.isBoolean(value) || Utils.isNumber(value) || Utils.isFunction(value)) {
        return false;
      }

      if (value instanceof Set && !Utils.isUndefined(value.size) && value.size !== 0) {
        return true;
      }

      return Object.keys(value).length !== 0;
    }
  }, {
    key: "isString",
    value: function isString(value) {
      return typeof value === 'string';
    }
  }, {
    key: "isUndefinedOrNull",
    value: function isUndefinedOrNull(value) {
      return Utils.isUndefined(value) || Utils.isNull(value);
    }
  }, {
    key: "isUndefinedOrNullOrEmpty",
    value: function isUndefinedOrNullOrEmpty(value) {
      return Utils.isUndefinedOrNull(value) || Utils.isEmpty(value);
    }
  }, {
    key: "isUndefinedOrNullOrEmptyObject",
    value: function isUndefinedOrNullOrEmptyObject(value) {
      return Utils.isUndefinedOrNullOrEmpty(value) || Utils.isEmptyObject(value);
    }
  }, {
    key: "isUndefinedOrNullOrEmptyList",
    value: function isUndefinedOrNullOrEmptyList(value) {
      return Utils.isUndefinedOrNull(value) || Utils.isEmptyList(value);
    }
  }, {
    key: "isUndefinedOrNullOrEmptyOrEmptyObjectOrEmptyList",
    value: function isUndefinedOrNullOrEmptyOrEmptyObjectOrEmptyList(value) {
      return Utils.isUndefinedOrNullOrEmpty(value) || Utils.isEmptyObject(value) || Utils.isUndefinedOrNullOrEmptyList(value);
    }
  }, {
    key: "copy",
    value: function copy(value) {
      return _objectSpread({}, value);
    }
  }, {
    key: "deepCopy",
    value: function deepCopy(value) {
      return JSON.parse(JSON.stringify(value));
    }
  }, {
    key: "isUrlMatched",
    value: function isUrlMatched(originalUrl, url) {
      var newUrl = originalUrl.split('?')[0];

      var _originalUrl$split = originalUrl.split('#');

      var _originalUrl$split2 = _slicedToArray(_originalUrl$split, 1);

      newUrl = _originalUrl$split2[0];

      if (newUrl === url) {
        return true;
      }

      return false;
    }
  }, {
    key: "refactorQueryPageNumber",
    value: function refactorQueryPageNumber(param) {
      var newParam = Utils.copy(param);

      if (!Utils.isUndefinedOrNull(newParam.pageNumber)) {
        newParam.pageNumber -= 1;
      }

      return newParam;
    }
  }, {
    key: "makeQueryString",
    value: function makeQueryString(params) {
      var _this = this;

      if (this.isUndefinedOrNullOrEmptyObject(params)) {
        return '';
      }

      var query = [];
      Object.keys(params).forEach(function (index) {
        if (!_this.isUndefinedOrNullOrEmpty(params[index]) && _typeof(params[index]) === 'object') {
          var filters = params[index];
          Object.keys(filters).forEach(function (key) {
            if (filters[key] instanceof Array) {
              query.push("".concat(index, "=").concat(key, ":").concat(filters[key].join('|')));
            }
          });
        } else if (!_this.isUndefinedOrNullOrEmpty(params[index])) {
          query.push("".concat(index, "=").concat(params[index]));
        }
      });
      return query.join('&');
    }
  }, {
    key: "makeQueryFilter",
    value: function makeQueryFilter(queryString) {
      var _this2 = this;

      var params = {};
      var query = queryString;

      if (query.charAt(0) === '?') {
        query = query.substr(1);
      }

      if (!this.isStringAndNotEmpty(query)) {
        return params;
      }

      var obj = query.split('&');
      Object.keys(obj).forEach(function (index) {
        var option = obj[index].split('=');
        var paramName = option[0];
        var paramValue = option[1];

        if (Object.prototype.hasOwnProperty.call(params, paramName)) {
          if (_this2.isStringAndNotEmpty(params[paramName])) {
            var temp = params[paramName].split(':');
            var keyName = temp[0];
            var keyValue = temp[1];
            params[paramName] = {};
            params[paramName][keyName] = keyValue.split('|');
            var newValue = paramValue.split(':');
            params[paramName][newValue[0]] = newValue[1].split('|');
          } else {
            var _temp = params[paramName];

            var _newValue = paramValue.split(':');

            _temp[_newValue[0]] = _newValue[1].split('|');
            params[paramName] = _temp;
          }
        } else {
          params[paramName] = paramValue;
        }
      });
      return params;
    }
  }, {
    key: "findGetParameter",
    value: function findGetParameter(parameterName) {
      var result = null;
      var tmp = [];
      var items = window.location.search.substr(1).split('&');

      for (var index = 0; index < items.length; index += 1) {
        tmp = items[index].split('=');
        if (tmp[0] === parameterName) result = decodeURIComponent(tmp[1]);
      }

      return result;
    }
  }, {
    key: "formatCurrency",
    value: function formatCurrency(number, addRupeeSymbol) {
      if (this.isUndefinedOrNullOrEmpty(number)) {
        return number;
      }

      try {
        return (addRupeeSymbol ? '₹ ' : '') + number.toLocaleString('en-IN');
      } catch (error) {
        throw new Error(error);
      }
    }
  }, {
    key: "formatCurrencyFromString",
    value: function formatCurrencyFromString(numberString) {
      if (Number.isNaN(numberString)) {
        return numberString;
      }

      if (this.isUndefinedOrNullOrEmpty(numberString)) {
        return numberString;
      }

      if (Number(numberString) === 0) {
        return numberString;
      }

      var afterPoint = '';
      var x = numberString;

      if (x.indexOf('.') > 0) {
        afterPoint = x.substring(x.indexOf('.'), x.length);
      }

      x = Math.floor(x);
      x = x.toString();
      var lastThree = x.substring(x.length - 3);
      var otherNumbers = x.substring(0, x.length - 3);

      if (otherNumbers !== '') {
        lastThree = ",".concat(lastThree);
      }

      return otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, ',') + lastThree + afterPoint;
    }
  }, {
    key: "modulus",
    value: function modulus(number) {
      return number % 1;
    }
  }, {
    key: "convertNumber",
    value: function convertNumber(num) {
      var number = num;

      if (number < 0 || number > 999999999) {
        return 'NUMBER OUT OF RANGE!';
      }

      var Gn = Math.floor(number / 10000000);
      /* Crore */

      number -= Gn * 10000000;
      var kn = Math.floor(number / 100000);
      /* lakhs */

      number -= kn * 100000;
      var Hn = Math.floor(number / 1000);
      /* thousand */

      number -= Hn * 1000;
      var Dn = Math.floor(number / 100);
      /* Tens (deca) */

      number %= 100;
      /* Ones */

      var tn = Math.floor(number / 10);
      var one = Math.floor(number % 10);
      var res = '';

      if (Gn > 0) {
        res += "".concat(this.convertNumber(Gn), " CRORE");
      }

      if (kn > 0) {
        res += "".concat((res === '' ? '' : ' ') + this.convertNumber(kn), " LAKH");
      }

      if (Hn > 0) {
        res += "".concat((res === '' ? '' : ' ') + this.convertNumber(Hn), " THOUSAND");
      }

      if (Dn) {
        res += "".concat((res === '' ? '' : ' ') + this.convertNumber(Dn), " HUNDRED");
      }

      var ones = ['', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'TEN', 'ELEVEN', 'TWELVE', 'THIRTEEN', 'FOURTEEN', 'FIFTEEN', 'SIXTEEN', 'SEVENTEEN', 'EIGHTEEN', 'NINETEEN'];
      var tens = ['', '', 'TWENTY', 'THIRTY', 'FOURTY', 'FIFTY', 'SIXTY', 'SEVENTY', 'EIGHTY', 'NINETY'];

      if (tn > 0 || one > 0) {
        if (!(res === '')) {
          res += ' AND ';
        }

        if (tn < 2) {
          res += ones[tn * 10 + one];
        } else {
          res += tens[tn];

          if (one > 0) {
            res += "-".concat(ones[one]);
          }
        }
      }

      if (res === '') {
        res = 'zero';
      }

      return res;
    }
  }, {
    key: "formatCurrencyToWords",
    value: function formatCurrencyToWords(number) {
      try {
        var fraction = Math.round(this.modulus(number) * 100);
        var fText = '';

        if (fraction > 0) {
          fText = "AND ".concat(this.convertNumber(fraction), " PAISE");
        }

        return "".concat(this.convertNumber(number), " RUPEE ").concat(fText, " ONLY");
      } catch (error) {
        throw new Error(error);
      }
    }
  }, {
    key: "formatDate",
    value: function formatDate(dateLong, format) {
      if (Utils.isUndefinedOrNull(dateLong) || dateLong === 0) {
        return '-';
      }

      var newFormat = format || 'dd mmm yyyy';
      var date = new Date(dateLong);
      return (0, _dateformat["default"])(date, newFormat);
    }
  }, {
    key: "formatDateAndTime",
    value: function formatDateAndTime(dateLong, format) {
      var newFormat = format || 'dd mmm yyyy h:MM TT';
      return this.formatDate(dateLong, newFormat);
    }
  }, {
    key: "getUniqueList",
    value: function getUniqueList(list) {
      var newList = [];

      for (var i = 0; i < list.length; i += 1) {
        if (newList.indexOf(list[i]) === -1) {
          newList.push(list[i]);
        }
      }

      return newList;
    }
  }, {
    key: "getErrorMessage",
    value: function getErrorMessage(error, defaultMessage) {
      var message = defaultMessage || 'Server is unavailable.';

      if (!Utils.isUndefinedOrNullOrEmpty(error.responseText)) {
        return JSON.parse(error.responseText).errorMessage;
      }

      return message;
    }
  }, {
    key: "getNestedValue",
    value: function getNestedValue(obj, keyString) {
      if (obj !== Object(obj) || Utils.isUndefinedOrNullOrEmpty(keyString)) {
        return null;
      }

      var keys = keyString.split('.');
      var currObj = obj[keys.shift()];

      while (currObj && keys.length) {
        currObj = currObj[keys.shift()];
      }

      return currObj;
    }
  }, {
    key: "getStringOrHyphen",
    value: function getStringOrHyphen(input) {
      if (input) {
        return input;
      }

      return '-';
    }
  }, {
    key: "getCdnUrl",
    value: function getCdnUrl(url) {
      var cdnUrl = '{_imgCdnUrl}';

      if (!Utils.isUndefinedOrNullOrEmpty(url)) {
        return cdnUrl + url;
      }

      return '';
    }
  }, {
    key: "fromNow",
    value: function fromNow(date) {
      var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds

      var firstDate = date;
      var secondDate = new Date();
      var diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / oneDay));

      if (diffDays === 1) {
        return "".concat(diffDays, " day ago");
      }

      return "".concat(diffDays, " days ago");
    }
  }, {
    key: "getCompletedApplicationStep",
    value: function getCompletedApplicationStep(application, pdform) {
      if (this.isUndefinedOrNullOrEmpty(application)) {
        return 0;
      }

      var step1Complete = true;

      if (application.loanAmount <= 0 || this.isUndefinedOrNullOrEmpty(application.client.name) || this.isUndefinedOrNullOrEmpty(application.contactPersonName) || this.isUndefinedOrNullOrEmpty(application.contactPersonMobile)) {
        step1Complete = false;
      }

      var step2Complete = true;

      if (this.isUndefinedOrNullOrEmpty(application.client.entityType) || this.isUndefinedOrNullOrEmpty(application.client.pan) || this.isUndefinedOrNullOrEmptyObject(application.client.officeAddress) || this.isUndefinedOrNullOrEmpty(application.client.officeAddress.addressLine1) || this.isUndefinedOrNullOrEmpty(application.client.officeAddress.city) || this.isUndefinedOrNullOrEmpty(application.client.officeAddress.state) || this.isUndefinedOrNullOrEmpty(application.client.officeAddress.pinCode) || this.isUndefinedOrNullOrEmptyList(application.client.promoters) || this.isUndefinedOrNullOrEmptyObject(application.client.promoters[0]) || this.isUndefinedOrNullOrEmpty(application.client.promoters[0].name)) {
        step2Complete = false;
      }

      var pdStepComplete = true;

      if (this.isUndefinedOrNullOrEmpty(pdform && pdform.answers)) {
        pdStepComplete = false;
      }

      if (step1Complete) {
        if (step2Complete) {
          if (pdStepComplete) {
            return 3;
          }

          return 2;
        }

        return 1;
      }

      return 0;
    }
  }, {
    key: "parallel",
    value: function parallel(tasks, callback) {
      if (Array.isArray(tasks)) {
        var totalNumberOfTasks = tasks.length;

        if (totalNumberOfTasks <= 0) {
          throw new Error('Empty task array passed to parallel');
        }

        var taskCompletedCount = 0;
        var results = [];
        tasks.forEach(function (task, index) {
          task(function () {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            var err = args.length <= 0 ? new Error("No callback arguments passed for task number ".concat(index + 1)) : args[0];

            if (err) {
              callback(err);
            }

            args.shift(); // removes first element

            var result; // result undefined if no more arguments left

            if (args.length === 1) {
              result = args[0];
            } else if (args.length > 1) {
              result = args; // result multiple values
            }

            results[index] = result;
            taskCompletedCount += 1;

            if (taskCompletedCount === totalNumberOfTasks) {
              callback(null, results);
            }
          });
        });
      } else {
        var keys = Object.keys(tasks);
        var _totalNumberOfTasks = keys.length;

        if (keys.length <= 0) {
          throw new Error('Empty task object passed to parallel');
        }

        var _taskCompletedCount = 0;
        var _results = {};
        keys.forEach(function (key, index) {
          tasks[key](function () {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }

            var err = args.length <= 0 ? new Error("No callback arguments passed for task number ".concat(index + 1)) : args[0];

            if (err) {
              callback(err);
            }

            args.shift(); // removes first element

            var result; // result undefined if no more arguments left

            if (args.length === 1) {
              result = args[0];
            } else if (args.length > 1) {
              result = args; // result multiple values
            }

            _results[key] = result;
            _taskCompletedCount += 1;

            if (_taskCompletedCount === _totalNumberOfTasks) {
              callback(null, _results);
            }
          });
        });
      }
    }
  }, {
    key: "objToQueryString",
    value: function objToQueryString(obj) {
      if (this.isUndefinedOrNullOrEmptyObject(obj)) {
        return null;
      }

      var str = [];
      Object.keys(obj).map(function (p) {
        if (Object.prototype.hasOwnProperty.call(obj, p)) {
          if (!Utils.isUndefinedOrNull(obj[p])) {
            if (Object.prototype.toString.call(obj[p]) === '[object Array]') {
              for (var i = 0; i < obj[p].length; i += 1) {
                str.push("".concat(encodeURIComponent(p), "=").concat(encodeURIComponent(obj[p][i])));
              }
            } else if (typeof obj[p] === 'string' || typeof obj[p] === 'number' || typeof obj[p] === 'boolean') {
              str.push("".concat(encodeURIComponent(p), "=").concat(encodeURIComponent(obj[p].toString())));
            }
          }
        }

        return str;
      });
      return str.join('&');
    }
  }, {
    key: "capitalizeByWords",
    value: function capitalizeByWords(input) {
      if (Utils.isUndefinedOrNullOrEmpty(input)) {
        return input;
      }

      var cap = '';
      var inputTokens = input.split('_');

      for (var num = 0; num < inputTokens.length - 1; num += 1) {
        cap = cap.concat(Utils.capitalize(inputTokens[num]));
        cap = cap.concat(' ');
      }

      cap = cap.concat(Utils.capitalize(inputTokens[inputTokens.length - 1]));
      return cap;
    }
  }, {
    key: "capitalize",
    value: function capitalize(input) {
      if (Utils.isUndefinedOrNullOrEmpty(input)) {
        return input;
      }

      var cap = '';
      var inputTokens = input.split(' ');

      for (var num = 0; num < inputTokens.length; num += 1) {
        cap = cap + inputTokens[num].substring(0, 1).toUpperCase() + inputTokens[num].substring(1).toLowerCase();

        if (num !== inputTokens.length - 1) {
          cap += ' ';
        }
      }

      return cap;
    }
  }, {
    key: "handleCaret",
    value: function handleCaret(key) {
      if (!Utils.isUndefinedOrNullOrEmpty(key)) {
        var index = key.indexOf('^');

        if (index > -1) {
          var keyPrefix = key.slice(0, index);
          var keySuffix = key.slice(index + 1, index + 2);
          var keyEnd = key.slice(index + 2);
          return "".concat(keyPrefix, "<sup>").concat(keySuffix, "</sup>").concat(keyEnd);
        }
      }

      return key;
    }
  }, {
    key: "isElementInViewport",
    value: function isElementInViewport(el) {
      var rect = el.getBoundingClientRect();
      return rect.bottom > 0 && rect.right > 0 && rect.left < (window.innerWidth || document.documentElement.clientWidth) && rect.top < (window.innerHeight || document.documentElement.clientHeight);
    }
  }, {
    key: "numberToOrdinalSuffix",
    value: function numberToOrdinalSuffix(i) {
      var j = i % 10;
      var k = i % 100;

      if (j === 1 && k !== 11) {
        return "".concat(i, "st");
      }

      if (j === 2 && k !== 12) {
        return "".concat(i, "nd");
      }

      if (j === 3 && k !== 13) {
        return "".concat(i, "rd");
      }

      return "".concat(i, "th");
    }
  }, {
    key: "swapElement",
    value: function swapElement(array, indexA, indexB) {
      var newList = this.deepCopy(array);
      newList[indexA] = array[indexB];
      newList[indexB] = array[indexA];
      return newList;
    }
  }, {
    key: "timeToExpiryBy",
    value: function timeToExpiryBy(futureTime) {
      if (!futureTime) return null;
      var millis = +futureTime - Date.now();
      var isExpired = false;
      var time = [];
      if (millis < 0) isExpired = true; // get total seconds between the times

      var delta = Math.abs(millis) / 1000; // calculate (and subtract) whole days

      var days = Math.floor(delta / 86400);
      delta -= days * 86400;
      if (days) time.push("".concat(days, " day").concat(days > 1 ? 's' : '')); // calculate (and subtract) whole hours

      var hours = Math.floor(delta / 3600) % 24;
      delta -= hours * 3600;
      if (hours) time.push("".concat(hours, " hr").concat(hours > 1 ? 's' : '')); // calculate (and subtract) whole minutes

      if (!days) {
        var minutes = Math.floor(delta / 60) % 60;
        delta -= minutes * 60;
        if (minutes) time.push("".concat(minutes, " min").concat(minutes > 1 ? 's' : ''));
      }

      return {
        isExpired: isExpired,
        timeString: time.join(', ')
      };
    }
  }, {
    key: "getNAWhenValueZero",
    value: function getNAWhenValueZero(value) {
      return value === 0 ? '-' : value;
    }
  }, {
    key: "preventClickAndOpenInNewIfCmd",
    value: function preventClickAndOpenInNewIfCmd(e) {
      if ((e.ctrlKey || e.metaKey) && !(e.ctrlKey && e.metaKey)) {
        return true;
      }

      e.preventDefault();
      return false;
    }
  }, {
    key: "getFileExtension",
    value: function getFileExtension(fileName) {
      if (this.isUndefinedOrNullOrEmpty(fileName)) {
        return null;
      }

      return fileName.split('.').reverse()[0];
    }
  }, {
    key: "viewableImageFormats",
    value: function viewableImageFormats(extension) {
      var formats = ['jpg', 'JPEG', 'jpeg', 'png', 'svg', 'gif', 'TIFF', 'bmp'];
      return formats.indexOf(extension) !== -1;
    }
  }, {
    key: "getUniqueId",
    value: function getUniqueId() {
      var pad = '0000000';
      var uniqueIdStr = Math.floor(Math.random() * 10000000).toString();
      return "".concat(new Date().getTime(), "X").concat(pad.substring(0, pad.length - uniqueIdStr.length)).concat(uniqueIdStr);
    }
  }, {
    key: "getSlug",
    value: function getSlug(str) {
      if (this.isUndefinedOrNullOrEmpty(str)) {
        return null;
      }

      return str.replace(/ /g, '-');
    }
  }, {
    key: "getTrimmedString",
    value: function getTrimmedString(str, length) {
      if (this.isUndefinedOrNullOrEmpty(length)) {
        return str;
      }

      if (str.length > length) {
        return "".concat(str.substr(0, length), "...");
      }

      return str;
    }
  }, {
    key: "getCamelCased",
    value: function getCamelCased(str) {
      if (this.isUndefinedOrNullOrEmpty(str)) {
        return null;
      }

      return str.replace(/-([a-z])/g, function (g) {
        return g[1].toUpperCase();
      });
    }
  }, {
    key: "shareIt",
    value: function shareIt(shareUrl) {
      if (typeof window === 'undefined') {
        return;
      }

      var sTop = window.screen.height / 2 - 218;
      var sLeft = window.screen.width / 2 - 313;
      window.open(shareUrl, 'sharer', "toolbar=0, status=0, width=626, height=256, top=".concat(sTop, ", left=").concat(sLeft));
    }
  }, {
    key: "convertCurrencyNumerals",
    value: function convertCurrencyNumerals(n) {
      if (this.isUndefinedOrNullOrEmpty(n)) {
        return null;
      }

      var num = Math.abs(Number(this.replaceString(n, ',', '')));

      var roundToOne = function roundToOne(val) {
        return val.toString().indexOf('.') > -1 ? val.toString().substr(0, val.toString().indexOf('.') + 2) : val;
      };

      if (Number.isNaN(num)) {
        return '-';
      }

      if (num >= 1e7) {
        return "".concat(roundToOne(num / 1e7), " Cr");
      }

      if (num >= 1e5) {
        return "".concat(roundToOne(num / 1e5), " L");
      }

      if (num >= 1e3) {
        return "".concat(roundToOne(num / 1e3), " K");
      }

      return num;
    }
  }, {
    key: "replaceString",
    value: function replaceString(val, str, newStr) {
      if (this.isUndefinedOrNullOrEmpty(val) || this.isUndefinedOrNull(str) || Number(val) === 0) {
        return val;
      } // if (Number(val) === 0 || Number.isNaN(Number(val))) {
      //     return val;
      // }


      var newString = this.isUndefinedOrNull(newStr) ? '' : newStr;
      return val.replace(new RegExp(str, 'g'), newString);
    }
  }, {
    key: "getQueryParamsFromUrl",
    value: function getQueryParamsFromUrl(url) {
      if (this.isUndefinedOrNullOrEmpty(url)) {
        return {};
      }

      var regex = /[?&]([^=#]+)=([^&#]*)/g;
      var params = {};
      var match = null;

      do {
        match = regex.exec(url);

        if (!this.isUndefinedOrNull(match)) {
          var _match = match,
              _match2 = _slicedToArray(_match, 3),
              b = _match2[1],
              c = _match2[2];

          params[b] = c;
        }
      } while (match != null);

      return params;
    }
  }, {
    key: "isStringHasOnlyNumber",
    value: function isStringHasOnlyNumber(n) {
      return /^-?[\d.]+(?:e-?\d+)?$/.test(n);
    }
  }, {
    key: "getRoundOfValue",
    value: function getRoundOfValue(value, roundOf) {
      if (this.isUndefinedOrNullOrEmpty(value)) {
        return null;
      }

      return Number(value).toFixed(roundOf);
    }
  }, {
    key: "updateLoginPath",
    value: function updateLoginPath(step) {
      if (this.isUndefinedOrNullOrEmptyObject(step)) {
        return;
      }

      if (typeof window === 'undefined') {
        return;
      }

      var url = new URL(window.location.toString());
      url.hash = "#".concat(step.path);
      var newUrl = url.toString();
      window.location = newUrl;
    }
  }, {
    key: "pushUrlInHistory",
    value: function pushUrlInHistory(url) {
      if (typeof window !== 'undefined') {
        if (window.history.pushState) {
          window.history.pushState({
            path: url
          }, '', url);
        }
      }
    }
  }, {
    key: "isMSite",
    value: function isMSite(pageInfo) {
      if (this.isUndefinedOrNullOrEmptyObject(pageInfo)) {
        return false;
      }

      return pageInfo && pageInfo.platform === _constants["default"].PLATFORM.M_SITE;
    }
  }, {
    key: "goBackInHistory",
    value: function goBackInHistory() {
      if (typeof window !== 'undefined') {
        if (window.history.back) {
          window.history.back();
        }
      }
    }
  }, {
    key: "replaceStringToNumber",
    value: function replaceStringToNumber(val) {
      var newVal = val;

      if (this.isUndefinedOrNullOrEmpty(val) || Number(val) === 0 || newVal.toString().indexOf(',') === -1) {
        return Number(val);
      }

      return Number(this.replaceString(val, ',', ''));
    }
  }, {
    key: "getHasSha",
    value: function getHasSha(input) {
      var hash = _crypto["default"].createHash('sha512');

      hash.update(input);
      var value = hash.digest('hex');
      return value;
    }
  }, {
    key: "setHostUrl",
    value: function setHostUrl(pageInfo, url) {
      var protocol = pageInfo.protocol,
          host = pageInfo.host;

      if (host === 'localhost') {
        return "".concat(protocol, "://").concat(host, ":9000/").concat(url);
      }

      return "".concat(protocol, "://").concat(host, "/").concat(url);
    }
  }, {
    key: "getDateDiff",
    value: function getDateDiff(d1, d2) {
      var date1 = new Date(d1);
      var date2 = new Date(d2);
      var oneDay = 24 * 3600 * 1000; // one day

      var diffDays = parseInt((date2 - date1) / oneDay, 10);
      return diffDays;
    }
  }, {
    key: "toTitleCase",
    value: function toTitleCase(str) {
      if (this.isUndefinedOrNullOrEmpty(str)) {
        return '';
      }

      if (str.length === 1) {
        return str.toUpperCase();
      }

      var newStr = str.charAt(0).toUpperCase() + str.slice(1);
      return newStr;
    }
  }, {
    key: "formatPhoneNumber",
    value: function formatPhoneNumber(mobile) {
      if (!mobile) {
        return mobile;
      }

      var tempArr = mobile.split(''); // if (this.isUndefinedOrNullOrEmpty(mobile) || (tempArr.length !== 13 && tempArr.length !== 12)) {

      if (this.isUndefinedOrNullOrEmpty(mobile)) {
        return mobile;
      }

      var newStr = '';

      if (tempArr.length === 13) {
        for (var i = 0; i < tempArr.length; i += 1) {
          newStr += tempArr[i];

          if (i === 2 || i === 6 || i === 9) {
            newStr += ' ';
          }
        }
      }

      if (tempArr.length === 12) {
        for (var _i2 = 0; _i2 < tempArr.length; _i2 += 1) {
          newStr += tempArr[_i2];

          if (_i2 === 1 || _i2 === 5 || _i2 === 8) {
            newStr += ' ';
          }
        }

        newStr = "+".concat(newStr);
      }

      return newStr;
    }
  }, {
    key: "getTenDigitMobile",
    value: function getTenDigitMobile(mobile) {
      if (!mobile) {
        return mobile;
      }

      return mobile.substr(mobile.length - 10);
    }
  }, {
    key: "getNameByKey",
    value: function getNameByKey(obj, filterKey) {
      var array = [];
      var filterName = '';
      Object.keys(obj).forEach(function (item) {
        if (!Utils.isEmptyList(obj[item])) {
          array.push.apply(array, _toConsumableArray(obj[item]));
        }
      });
      array.forEach(function (item) {
        if (item.key === filterKey) {
          filterName = item.name;
        }
      });
      return filterName;
    }
  }, {
    key: "getDomain",
    value: function getDomain(pageInfo) {
      if (this.isUndefinedOrNullOrEmptyObject(pageInfo)) {
        return null;
      }

      return pageInfo.domain;
    }
  }, {
    key: "getQueryParams",
    value: function getQueryParams(queryStr) {
      if (Utils.isUndefinedOrNullOrEmpty(queryStr)) {
        return {};
      }

      var params = {};
      var queryParamsStr = queryStr.split('?')[1];
      var queryParamsArr = queryParamsStr.split('&');
      queryParamsArr.forEach(function (item) {
        var tempItem = item.split('=');
        var itemKey = tempItem[0];
        var itemValue = tempItem[1];
        params[itemKey] = itemValue;
      });
      return params;
    }
  }, {
    key: "makeCommaStrFromObj",
    value: function makeCommaStrFromObj(dataItem) {
      var _this3 = this;

      var commaStr = '';

      if (Utils.isUndefinedOrNullOrEmptyObject(dataItem)) {
        return '-';
      }

      var totalLength = Object.keys(dataItem).length;
      Object.keys(dataItem).map(function (key) {
        commaStr += _this3.capitalizeByWords(dataItem[key].name);

        if (Number(key) < totalLength && Number(key) !== totalLength - 1) {
          commaStr += ', ';
        }

        return commaStr;
      });
      return commaStr || '-';
    }
  }, {
    key: "makeCommaStrFromList",
    value: function makeCommaStrFromList(dataItem) {
      var commaStr = '';

      if (Utils.isUndefinedOrNullOrEmptyList(dataItem)) {
        return '-';
      }

      for (var i = 0; i < dataItem.length; i += 1) {
        commaStr += this.capitalizeByWords(dataItem[i]);

        if (i < dataItem.length && i !== dataItem.length - 1) {
          commaStr += ', ';
        }
      }

      return commaStr || '-';
    }
  }, {
    key: "getQueryParamByKey",
    value: function getQueryParamByKey(search, key) {
      if (Utils.isUndefinedOrNullOrEmpty(search)) {
        return '';
      }

      if (search.indexOf(key) === -1) {
        return '';
      }

      var params = {};
      var queryParamsStr = search.split('?')[1];
      var queryParamsArr = queryParamsStr.split('&');
      queryParamsArr.forEach(function (item) {
        var tempItem = item.split('=');
        var itemKey = tempItem[0];
        var itemValue = tempItem[1];
        params[itemKey] = itemValue;
      });
      return params[key];
    }
  }]);

  return Utils;
}();

exports["default"] = Utils;

//# sourceMappingURL=common.js.map