"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _tcombForm = _interopRequireDefault(require("tcomb-form"));

var _renderFormGroup = _interopRequireDefault(require("./renderFormGroup"));

var _BreakPoints = _interopRequireDefault(require("./BreakPoints"));

var _getLabel = _interopRequireDefault(require("./getLabel"));

var _getError = _interopRequireDefault(require("./getError"));

var _getHelp = _interopRequireDefault(require("./getHelp"));

var _common = _interopRequireDefault(require("../../utils/common"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TextboxConfig = _tcombForm["default"].struct({
  addonBefore: _tcombForm["default"].Any,
  addonAfter: _tcombForm["default"].Any,
  horizontal: _tcombForm["default"].maybe(_BreakPoints["default"]),
  buttonBefore: _tcombForm["default"].Any,
  buttonAfter: _tcombForm["default"].Any,
  capitalize: _tcombForm["default"].Any
}, 'TextboxConfig');

function getInputGroupButton(button) {
  return button;
}

function getInputGroup(children, locals) {
  var className = 'input-group';

  if (locals.disabled) {
    className += ' disabled';
  }

  return _react["default"].createElement.apply(null, ['div', {
    className: className
  }].concat(children));
}

function getAddon(addon) {
  return _react["default"].createElement("span", {
    className: "input-group-addon"
  }, addon);
}

function onChange(locals, reRender, attrs) {
  if (locals.type === 'file') {
    return function (evt) {
      locals.onChange(evt.target.files[0]);

      if (_common["default"].isFunction(reRender)) {
        reRender(evt.target.files[0]);
      }
    };
  }

  if (locals.type === 'number' && attrs.showCounter) {
    return function (evt, type) {
      var value = evt.target.value;
      var localsValue = parseInt(locals.value, 10);
      var counterCallback = locals.attrs.counterCallback;

      if (type === 'INC') {
        value = Number.isNaN(localsValue) ? 1 : localsValue + 1;
      } else if (type === 'DEC') {
        value = Number.isNaN(localsValue) ? -1 : localsValue - 1;
      }

      locals.onChange(value);

      if (_common["default"].isFunction(reRender)) {
        reRender(value);
      }

      if (!_common["default"].isUndefinedOrNullOrEmpty(type) && _common["default"].isFunction(counterCallback)) {
        setTimeout(function () {
          counterCallback(value);
        }, 1);
      }
    };
  }

  if (attrs.validateRegex) {
    var regex = new RegExp(attrs.validateRegex);
    return function (evt) {
      var val = evt.target.value;

      if (!regex.test(val)) {
        return;
      }

      if (locals.config.capitalize) {
        val = val.toUpperCase();
      }

      locals.onChange(val);

      if (_common["default"].isFunction(reRender)) {
        reRender(val);
      }
    };
  }

  return function (evt) {
    var val = evt.target.value;

    if (locals.config.capitalize) {
      val = val.toUpperCase();
    }

    locals.onChange(val);

    if (_common["default"].isFunction(reRender)) {
      reRender(val);
    }
  };
}

function create() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  function textbox(obj) {
    var locals = obj;
    locals.config = textbox.getConfig(locals);
    locals.attrs = textbox.getAttrs(locals);

    if (locals.type === 'hidden') {
      return textbox.renderHiddenTextbox(locals);
    }

    var children = locals.config.horizontal ? textbox.renderHorizontal(locals) : textbox.renderVertical(locals);
    return textbox.renderFormGroup(children, locals);
  }

  textbox.getConfig = overrides.getConfig || function getConfig(locals) {
    return new TextboxConfig(locals.config || {});
  };

  textbox.getAttrs = overrides.getAttrs || function getAttrs(obj) {
    var locals = obj;
    var reRender = locals.attrs.reRender;
    delete locals.attrs.reRender;

    var attrs = _tcombForm["default"].mixin({}, locals.attrs);

    attrs.type = locals.type;
    attrs.className = (0, _classnames["default"])(attrs.className);
    attrs.className += "".concat(attrs.className ? ' ' : '', "form-control");
    attrs.disabled = locals.disabled;

    if (locals.type !== 'file') {
      attrs.value = locals.value;
    }

    attrs.onChange = onChange(locals, reRender, attrs);

    if (locals.help) {
      attrs['aria-describedby'] = attrs['aria-describedby'] || "".concat(attrs.id, "-tip");
    }

    return attrs;
  };

  textbox.renderHiddenTextbox = overrides.renderHiddenTextbox || function renderHiddenTextbox(locals) {
    return _react["default"].createElement("input", {
      type: "hidden",
      value: locals.value,
      name: locals.attrs.name
    });
  };

  textbox.renderStatic = overrides.renderStatic || function renderStatic(locals) {
    return _react["default"].createElement("p", {
      className: "form-control-static"
    }, locals.value);
  };

  textbox.renderTextbox = overrides.renderTextbox || function renderTextbox(locals) {
    if (locals.type === 'static') {
      return textbox.renderStatic(locals);
    }

    return locals.type !== 'textarea' ? textbox.renderInputGroup(locals) : textbox.renderTextarea(locals);
  };

  textbox.renderInputGroup = overrides.renderInputGroup || function renderInputGroup(locals) {
    return getInputGroup([locals.config.buttonBefore ? getInputGroupButton(locals.config.buttonBefore) : null, locals.config.addonBefore ? getAddon(locals.config.addonBefore) : null, textbox.renderInput(locals), locals.config.addonAfter ? getAddon(locals.config.addonAfter) : null, locals.config.buttonAfter ? getInputGroupButton(locals.config.buttonAfter) : null], locals);
  };

  textbox.renderInput = overrides.renderInput || function renderInput(locals) {
    var attrs = _tcombForm["default"].mixin({}, locals.attrs);

    delete attrs.formGroupClassName;
    delete attrs.validateRegex;
    delete attrs.counterCallback;

    if (attrs.type === 'number' && attrs.showCounter) {
      delete attrs.showCounter;
      return _react["default"].createElement("div", {
        className: "inputWithCounter"
      }, _react["default"].createElement("input", attrs), _react["default"].createElement("div", {
        className: "actionWrapper"
      }, _react["default"].createElement("button", {
        type: "button",
        className: "counter",
        onClick: function onClick(ev) {
          attrs.onChange(ev, 'DEC');
        }
      }, _react["default"].createElement("i", {
        className: "material-icons"
      }, "remove")), _react["default"].createElement("button", {
        type: "button",
        className: "counter",
        onClick: function onClick(ev) {
          attrs.onChange(ev, 'INC');
        }
      }, _react["default"].createElement("i", {
        className: "material-icons"
      }, "add"))));
    }

    return _react["default"].createElement("input", attrs);
  };

  textbox.renderTextarea = overrides.renderTextarea || function renderTextarea(locals) {
    var attrs = _tcombForm["default"].mixin({}, locals.attrs);

    delete attrs.isFormSubmit;
    return _react["default"].createElement("textarea", attrs);
  };

  textbox.renderLabel = overrides.renderLabel || function renderLabel(locals) {
    return (0, _getLabel["default"])({
      label: locals.label,
      htmlFor: locals.attrs.id,
      breakpoints: locals.config.horizontal
    });
  };

  textbox.renderError = overrides.renderError || function renderError(locals) {
    return (0, _getError["default"])(locals);
  };

  textbox.renderHelp = overrides.renderHelp || function renderHelp(locals) {
    return (0, _getHelp["default"])(locals);
  };

  textbox.renderVertical = overrides.renderVertical || function renderVertical(locals) {
    return [textbox.renderLabel(locals), textbox.renderTextbox(locals), textbox.renderError(locals), textbox.renderHelp(locals)];
  };

  textbox.renderHorizontal = overrides.renderHorizontal || function renderHorizontal(locals) {
    var label = textbox.renderLabel(locals);
    var className = label ? locals.config.horizontal.getInputClassName() : locals.config.horizontal.getOffsetClassName();
    return [label, _react["default"].createElement("div", {
      className: (0, _classnames["default"])(className)
    }, "11", textbox.renderTextbox(locals), textbox.renderError(locals), textbox.renderHelp(locals))];
  };

  textbox.renderFormGroup = overrides.renderFormGroup || _renderFormGroup["default"];

  textbox.clone = function clone() {
    var newOverrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return create(_objectSpread({}, overrides, {}, newOverrides));
  };

  return textbox;
}

var _default = create();

exports["default"] = _default;

//# sourceMappingURL=TextBox.js.map