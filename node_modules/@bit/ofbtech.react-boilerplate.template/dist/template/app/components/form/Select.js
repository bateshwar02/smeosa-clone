"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _reactSelect = _interopRequireWildcard(require("react-select"));

var _async = _interopRequireDefault(require("react-select/async"));

var _creatable = _interopRequireDefault(require("react-select/creatable"));

var _asyncCreatable = _interopRequireDefault(require("react-select/async-creatable"));

var _react = _interopRequireDefault(require("react"));

var _tcombForm = _interopRequireDefault(require("tcomb-form"));

var _renderFormGroup = _interopRequireDefault(require("./renderFormGroup"));

var _BreakPoints = _interopRequireDefault(require("./BreakPoints"));

var _getError = _interopRequireDefault(require("./getError"));

var _getLabel = _interopRequireDefault(require("./getLabel"));

var _getHelp = _interopRequireDefault(require("./getHelp"));

var _common = _interopRequireDefault(require("../../utils/common"));

var _IconDropdownArrow = _interopRequireDefault(require("../../icons/IconDropdownArrow"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SelectboxConfig = _tcombForm["default"].struct({
  addonBefore: _tcombForm["default"].Any,
  addonAfter: _tcombForm["default"].Any,
  horizontal: _tcombForm["default"].maybe(_BreakPoints["default"]),
  buttonBefore: _tcombForm["default"].Any,
  buttonAfter: _tcombForm["default"].Any
}, 'SelectboxConfig');

var getStyles = {
  control: function control() {
    return {
      alignItems: 'center',
      background: 'none',
      border: '1px solid #A8B7C7',
      borderRadius: '2px',
      display: 'flex',
      flexWrap: 'wrap',
      justifyContent: 'space-between',
      minHeight: '36px',
      outline: '0',
      position: 'relative',
      transition: 'all 100ms'
    };
  },
  indicatorSeparator: function indicatorSeparator() {
    return {
      display: 'none'
    };
  },
  placeholder: function placeholder() {
    return {
      color: 'rgba(22, 50, 92, 0.4)'
    };
  },
  valueContainer: function valueContainer() {
    return {
      alignItems: 'center',
      display: 'flex',
      flex: '1',
      flexWrap: 'wrap',
      padding: '2px 12px',
      position: 'relative',
      overflow: 'hidden'
    };
  },
  menu: function menu() {
    return {
      backgroundColor: 'hsl(0, 0%, 100%)',
      border: '1px solid #D8DDE6',
      boxShadow: '0 4px 10px 0 rgba(0,0,0,0.20)',
      boxSizing: 'border-box',
      position: 'absolute',
      top: '100%',
      width: '100%',
      zIndex: 1
    };
  },
  option: function option(provided) {
    return _objectSpread({}, provided, {
      backgroundColor: 'transparent',
      borderBottom: '1px solid #D8DDE6',
      ':hover': {
        backgroundColor: '#f4f6fc'
      },
      ':active': {
        backgroundColor: '#f4f6fc'
      },
      transition: 'all 200ms'
    });
  }
};

var DropdownIndicator = function DropdownIndicator(props) {
  return _reactSelect.components.DropdownIndicator && _react["default"].createElement(_reactSelect.components.DropdownIndicator, props, _react["default"].createElement(_IconDropdownArrow["default"], {
    size: 12,
    color: "#16325C"
  }));
};

function create() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  function select(obj) {
    var locals = obj;
    locals.config = select.getConfig(locals);
    var children = locals.config.horizontal ? select.renderHorizontal(locals) : select.renderVertical(locals);
    return select.renderFormGroup(children, locals);
  }

  select.getConfig = overrides.getConfig || function getConfig(locals) {
    return new SelectboxConfig(locals.config || {});
  };

  select.renderStatic = overrides.renderStatic || function renderStatic(locals) {
    return _react["default"].createElement("p", {
      className: "form-control-static select-static"
    }, locals.value);
  };

  select.renderSelectbox = overrides.renderSelectbox || function renderSelectbox(obj) {
    var locals = obj;

    if (locals.attrs.type === 'static') {
      return select.renderStatic(locals);
    }

    delete locals.attrs.attrs;
    var localsObj = {};

    if (!_common["default"].isUndefinedOrNullOrEmpty(locals.attrs.valueKey)) {
      localsObj.valueKey = locals.attrs.valueKey;
    } else {
      localsObj.valueKey = 'value';
    }

    var options = locals.options.filter(function (option) {
      return !_common["default"].isUndefinedOrNullOrEmpty(option[localsObj.valueKey]);
    });

    if (!_common["default"].isUndefinedOrNullOrEmpty(locals.attrs.disabled)) {
      localsObj.disabled = locals.attrs.disabled;
    }

    if (!_common["default"].isUndefinedOrNullOrEmpty(locals.attrs.multiSelect)) {
      localsObj.isMulti = true;
    }

    if (!_common["default"].isUndefinedOrNullOrEmpty(locals.attrs.valueKey)) {
      localsObj.valueKey = locals.attrs.valueKey;
    }

    if (!_common["default"].isUndefinedOrNullOrEmpty(locals.attrs.labelKey)) {
      localsObj.labelKey = locals.attrs.labelKey;
    }

    if (!_common["default"].isUndefinedOrNullOrEmpty(locals.attrs.autofocus)) {
      localsObj.autofocus = true;
    }

    if (!_common["default"].isUndefinedOrNullOrEmpty(locals.attrs.onInputKeyDown) && _common["default"].isFunction(locals.attrs.onInputKeyDown)) {
      localsObj.onInputKeyDown = locals.attrs.onInputKeyDown;
    }

    if (!_common["default"].isUndefinedOrNullOrEmpty(locals.attrs.onKeyDown) && _common["default"].isFunction(locals.attrs.onKeyDown)) {
      localsObj.onKeyDown = locals.attrs.onKeyDown;
    }

    if (!_common["default"].isUndefinedOrNullOrEmpty(locals.attrs.clearable)) {
      localsObj.clearable = locals.attrs.clearable;
    } else {
      localsObj.clearable = true;
    }

    if (!_common["default"].isUndefinedOrNullOrEmpty(locals.attrs.onItemClick) && _common["default"].isFunction(locals.attrs.onItemClick)) {
      localsObj.onValueClick = locals.attrs.onItemClick;
    }

    if (!_common["default"].isUndefinedOrNullOrEmpty(locals.attrs.className)) {
      localsObj.className = locals.attrs.className;
    }

    if (locals.attrs.formatOptionLabel) {
      localsObj.formatOptionLabel = locals.attrs.formatOptionLabel;
    }

    if (locals.attrs.getOptionLabel) {
      localsObj.getOptionLabel = locals.attrs.getOptionLabel;
    }

    if (!_common["default"].isUndefinedOrNullOrEmpty(locals.attrs.loadOptions) && _common["default"].isFunction(locals.attrs.loadOptions)) {
      localsObj.loadOptions = locals.attrs.loadOptions;
    } else if (_common["default"].isUndefinedOrNullOrEmpty(options)) {
      throw new Error('Invalid Call');
    } else {
      localsObj.options = options;
    } // This flag is to be used when we want to show default options passed
    // in options attribute when
    // component is mounted but still not has been populated with options
    // using loadOptions


    if (locals.attrs.reloadOptions) {
      localsObj.options = options;
    }

    localsObj.instanceId = locals.attrs.name;
    localsObj.simpleValue = true;

    if (!_common["default"].isUndefinedOrNullOrEmpty(locals.attrs.simpleValue)) {
      localsObj.simpleValue = locals.attrs.simpleValue;
    }

    localsObj.name = locals.attrs.name;
    localsObj.disabled = locals.attrs.disabled;
    localsObj.value = locals.value;

    localsObj.onChange = function (value) {
      locals.onChange(value);

      if (_common["default"].isFunction(locals.attrs.reRender)) {
        locals.attrs.reRender(value);
      }
    };

    localsObj.searchable = true;
    localsObj.placeholder = locals.attrs.placeholder || 'Select...';

    if (!locals.attrs.cache) {
      localsObj.cache = locals.attrs.cache;
    }

    if (!_common["default"].isUndefinedOrNullOrEmpty(locals.attrs.noResultsText)) {
      localsObj.noResultsText = locals.attrs.noResultsText;
    }

    var Component = _reactSelect["default"];

    if (!_common["default"].isUndefinedOrNullOrEmpty(locals.attrs.loadOptions) && _common["default"].isFunction(locals.attrs.loadOptions)) {
      if (locals.attrs.creatable) {
        Component = _asyncCreatable["default"];
      } else {
        Component = _async["default"];
      }
    } else if (locals.attrs.creatable) {
      Component = _creatable["default"];
    }

    localsObj.styles = getStyles;
    return _react["default"].createElement("div", {
      className: "reactSelectContainer"
    }, _react["default"].createElement(Component, _extends({
      ref: locals.name,
      components: {
        DropdownIndicator: DropdownIndicator
      }
    }, localsObj)));
  };

  select.renderLabel = overrides.renderLabel || function renderLabel(locals) {
    return (0, _getLabel["default"])({
      label: locals.label,
      htmlFor: locals.attrs.id,
      breakpoints: locals.config.horizontal
    });
  };

  select.renderError = overrides.renderError || function renderError(locals) {
    return (0, _getError["default"])(locals);
  };

  select.renderHelp = overrides.renderHelp || function renderHelp(locals) {
    return (0, _getHelp["default"])(locals);
  };

  select.renderVertical = overrides.renderVertical || function renderVertical(locals) {
    return [select.renderLabel(locals), select.renderSelectbox(locals), select.renderError(locals), select.renderHelp(locals)];
  };

  select.renderHorizontal = overrides.renderHorizontal || function renderHorizontal(locals) {
    var label = select.renderLabel(locals);
    var className = label ? locals.config.horizontal.getInputClassName() : locals.config.horizontal.getOffsetClassName();
    return [label, _react["default"].createElement("div", {
      className: (0, _classnames["default"])(className)
    }, select.renderSelectbox(locals), select.renderError(locals), select.renderHelp(locals))];
  };

  select.renderFormGroup = overrides.renderFormGroup || _renderFormGroup["default"];

  select.clone = function clone() {
    var newOverrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return create(_objectSpread({}, overrides, {}, newOverrides));
  };

  return select;
}

var _default = create();

exports["default"] = _default;

//# sourceMappingURL=Select.js.map