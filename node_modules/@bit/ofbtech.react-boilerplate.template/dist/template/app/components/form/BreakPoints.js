"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _tcombForm = _interopRequireDefault(require("tcomb-form"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var Positive = _tcombForm["default"].refinement(_tcombForm["default"].Number, function (n) {
  return n % 1 === 0 && n >= 0;
}, 'Positive');

var Cols = _tcombForm["default"].tuple([Positive, Positive], 'Cols');

var Breakpoints = _tcombForm["default"].struct({
  xs: _tcombForm["default"].maybe(Cols),
  sm: _tcombForm["default"].maybe(Cols),
  md: _tcombForm["default"].maybe(Cols),
  lg: _tcombForm["default"].maybe(Cols)
}, 'Breakpoints');

function getBreakpointsClassName(breakpoints) {
  var className = {};
  Object.keys(breakpoints).forEach(function (size) {
    if (Object.prototype.hasOwnProperty.call(breakpoints, size)) {
      className["col-".concat(size, "-").concat(breakpoints[size])] = true;
    }
  });
  return className;
}

function getOffsetsClassName(breakpoints) {
  var className = {};
  Object.keys(breakpoints).forEach(function (size) {
    if (Object.prototype.hasOwnProperty.call(breakpoints, size)) {
      className["col-".concat(size, "-offset-").concat(12 - breakpoints[size])] = true;
    }
  });
  return className;
}

Breakpoints.prototype.getBreakpoints = function getBreakpoints(colIndex) {
  var _this = this;

  var breakpoints = {};
  Object.keys(this).forEach(function (size) {
    if (Object.prototype.hasOwnProperty.call(_this, size) && !_tcombForm["default"].Nil.is(_this[size])) {
      breakpoints[size] = _this[size][colIndex];
    }
  });
  return breakpoints;
};

Breakpoints.prototype.getLabelClassName = function getLabelClassName() {
  return getBreakpointsClassName(this.getBreakpoints(0));
};

Breakpoints.prototype.getInputClassName = function getInputClassName() {
  return getBreakpointsClassName(this.getBreakpoints(1));
};

Breakpoints.prototype.getOffsetClassName = function getOffsetClassName() {
  return _tcombForm["default"].mixin(getOffsetsClassName(this.getBreakpoints(1)), getBreakpointsClassName(this.getBreakpoints(1)));
};

var _default = Breakpoints;
exports["default"] = _default;

//# sourceMappingURL=BreakPoints.js.map