"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _tcombForm = _interopRequireDefault(require("tcomb-form"));

var _classnames = _interopRequireDefault(require("classnames"));

var _renderFormGroup = _interopRequireDefault(require("./renderFormGroup"));

var _BreakPoints = _interopRequireDefault(require("./BreakPoints"));

var _getError = _interopRequireDefault(require("./getError"));

var _getLabel = _interopRequireDefault(require("./getLabel"));

var _getHelp = _interopRequireDefault(require("./getHelp"));

var _common = _interopRequireDefault(require("../../utils/common"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CheckboxConfig = _tcombForm["default"].struct({
  horizontal: _tcombForm["default"].maybe(_BreakPoints["default"])
}, 'CheckboxConfig');

function getCheckbox(attrs, text, key) {
  var checkboxGroupClasses = {
    disabled: attrs.disabled,
    checked: attrs.checked
  };

  function handleChange() {
    attrs.onChange(attrs.value);
  }

  return _react["default"].createElement("div", {
    key: key,
    className: (0, _classnames["default"])(checkboxGroupClasses)
  }, _react["default"].createElement("label", {
    htmlFor: key,
    className: "checkboxLabel",
    disabled: attrs.disabled || false
  }, _react["default"].createElement("input", {
    id: key,
    type: "checkbox",
    name: text,
    checked: attrs.checked,
    onChange: handleChange,
    value: attrs.value,
    disabled: attrs.disabled || false
  }), _react["default"].createElement("span", null, text)));
}

function create() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  function checkbox(locals) {
    var newLocal = locals;
    newLocal.config = checkbox.getConfig(newLocal);
    var children = newLocal.config.horizontal ? checkbox.renderHorizontal(newLocal) : checkbox.renderVertical(newLocal);
    return checkbox.renderFormGroup(children, newLocal);
  }

  checkbox.getConfig = overrides.getConfig || function getConfig(locals) {
    return new CheckboxConfig(locals.config || {});
  };

  checkbox.getAttrs = overrides.getAttrs || function getAttrs(locals) {
    var newLocal = locals;

    var attrs = _tcombForm["default"].mixin({}, newLocal.attrs);

    var reRender = newLocal.attrs.reRender;
    delete newLocal.attrs.reRender;
    attrs.type = 'checkbox';
    attrs.disabled = newLocal.disabled;
    attrs.checked = newLocal.value;

    attrs.onChange = function (evt) {
      newLocal.onChange(evt.target.checked);

      if (_common["default"].isFunction(reRender)) {
        reRender(evt.target.checked);
      }
    };

    if (newLocal.help) {
      attrs['aria-describedby'] = attrs['aria-describedby'] || "".concat(attrs.id, "-tip");
    }

    return attrs;
  };

  checkbox.renderStatic = overrides.renderStatic || function renderStatic(locals) {
    if (_common["default"].isUndefinedOrNullOrEmpty(locals.value)) {
      return null;
    }

    return _react["default"].createElement("p", {
      className: "form-control-static-group"
    }, locals.value.map(function (item, i) {
      return _react["default"].createElement("span", {
        key: "".concat(i + 1, "-static-chackbox"),
        className: "form-control-static"
      }, item, _react["default"].createElement("span", null, ", "));
    }));
  };

  checkbox.renderCheckbox = overrides.renderCheckbox || function renderCheckbox(locals) {
    if (locals.type === 'static') {
      return checkbox.renderStatic(locals);
    }

    var id = locals.attrs.id;

    var onChange = function onChange(_value) {
      var values = Object.assign([], locals.value);
      var pos = values.indexOf(_value);

      if (pos > -1) {
        values.splice(pos, 1);
      } else {
        values.push(_value);
      }

      locals.onChange(_common["default"].getUniqueList(values));
    };

    return _react["default"].createElement("div", {
      className: "checkbox-group"
    }, locals.options.map(function (option, i) {
      var checkboxView = locals.attrs.horizontalView;

      var attrs = _tcombForm["default"].mixin({}, locals.attrs);

      var pos = _common["default"].isUndefinedOrNullOrEmpty(locals.value) ? -1 : locals.value.indexOf(option.value);
      var key = "".concat(locals.label.replace(/ /g, '_'), "-checkbox-").concat(i);

      if (pos > -1) {
        attrs.checked = true;
      } else {
        attrs.checked = false;
      }

      delete attrs.horizontalView;
      delete attrs.isFormSubmit;
      attrs.type = 'checkbox';
      attrs.disabled = locals.disabled;
      attrs.value = option.value;
      attrs.autoFocus = attrs.autoFocus && i === 0;
      attrs.id = "".concat(id, "_").concat(i);
      attrs['aria-describedby'] = attrs['aria-describedby'] || (locals.label ? id : null);
      attrs.onChange = onChange;
      return getCheckbox(attrs, option.text, key, checkboxView);
    }));
  };

  checkbox.renderLabel = overrides.renderLabel || function renderLabel(locals) {
    return (0, _getLabel["default"])({
      label: locals.label,
      htmlFor: locals.attrs.id,
      breakpoints: locals.config.horizontal
    });
  };

  checkbox.renderError = overrides.renderError || function renderError(locals) {
    return (0, _getError["default"])(locals);
  };

  checkbox.renderHelp = overrides.renderHelp || function renderHelp(locals) {
    return (0, _getHelp["default"])(locals);
  };

  checkbox.renderVertical = overrides.renderVertical || function renderVertical(locals) {
    return [checkbox.renderLabel(locals), checkbox.renderCheckbox(locals), checkbox.renderError(locals), checkbox.renderHelp(locals)];
  };

  checkbox.renderHorizontal = overrides.renderHorizontal || function renderHorizontal(locals) {
    var label = checkbox.renderLabel(locals);
    var className = label ? locals.config.horizontal.getInputClassName() : locals.config.horizontal.getOffsetClassName();
    return [label, _react["default"].createElement("div", {
      className: (0, _classnames["default"])(className)
    }, checkbox.renderCheckbox(locals), checkbox.renderError(locals), checkbox.renderHelp(locals))];
  };

  checkbox.renderFormGroup = overrides.renderFormGroup || _renderFormGroup["default"];

  checkbox.clone = function clone() {
    var newOverrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return create(_objectSpread({}, overrides, {}, newOverrides));
  };

  return checkbox;
}

var _default = create();

exports["default"] = _default;

//# sourceMappingURL=CheckBox.js.map