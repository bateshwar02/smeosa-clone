"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _tcombForm = _interopRequireDefault(require("tcomb-form"));

var _lodash = _interopRequireDefault(require("lodash"));

var _react = _interopRequireDefault(require("react"));

var _2 = _interopRequireDefault(require("."));

var _common = _interopRequireDefault(require("../../utils/common"));

var _constants = require("../../utils/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Util =
/*#__PURE__*/
function () {
  function Util() {
    _classCallCheck(this, Util);
  }

  _createClass(Util, null, [{
    key: "textbox",
    value: function textbox(field, value, readonly) {
      var self = this;
      return {
        template: _2["default"].templates.textbox,
        label: self.getLabel(field),
        attrs: {
          placeholder: field.placeholder,
          disabled: readonly
        },
        error: self.getErrors(field),
        disabled: readonly
      };
    }
  }, {
    key: "textarea",
    value: function textarea(field, value, readonly) {
      var self = this;
      return {
        template: _2["default"].templates.textbox,
        label: self.getLabel(field),
        attrs: {
          placeholder: field.placeholder,
          disabled: readonly
        },
        type: 'textarea',
        error: self.getErrors(field),
        disabled: readonly
      };
    }
  }, {
    key: "richTextarea",
    value: function richTextarea(field, value, readonly) {
      var self = this;
      return {
        template: _2["default"].templates.textbox,
        label: self.getLabel(field),
        attrs: {
          placeholder: field.placeholder,
          disabled: readonly
        },
        type: 'richtext',
        error: self.getErrors(field),
        disabled: readonly
      };
    }
  }, {
    key: "checkbox",
    value: function checkbox(field, value, readonly) {
      var self = this;
      return {
        label: self.getLabel(field),
        attrs: {
          placeholder: field.placeholder,
          disabled: readonly
        },
        error: self.getErrors(field),
        disabled: readonly
      };
    }
  }, {
    key: "datepicker",
    value: function datepicker(field, value, readonly) {
      var self = this;
      var validator = null;

      if (!_common["default"].isUndefinedOrNullOrEmptyObject(field.properties)) {
        var startDate = field.properties.startDate;
        var endDate = field.properties.endDate;

        validator = function validator(now) {
          // min date constraint
          if (!_common["default"].isUndefinedOrNull(startDate) && Number(now) < Number(startDate)) {
            return false;
          } // max date constraint


          if (!_common["default"].isUndefinedOrNull(endDate) && Number(endDate) < Number(now)) {
            return false;
          }

          return true;
        };
      }

      var timeConstraints = null;

      if (!_common["default"].isUndefinedOrNullOrEmptyObject(field.properties)) {
        var _startDate = field.properties.startDate;
        var _endDate = field.properties.endDate;
        timeConstraints = {
          milliseconds: {}
        };

        if (!_common["default"].isUndefinedOrNull(_startDate)) {
          timeConstraints.milliseconds.min = Number(_startDate);
        }

        if (!_common["default"].isUndefinedOrNull(_endDate)) {
          timeConstraints.milliseconds.max = Number(_endDate);
        }
      }

      return {
        template: _2["default"].templates.date,
        label: self.getLabel(field),
        transformer: _2["default"].transformers.dateTransformer,
        attrs: {
          placeholder: field.placeholder,
          timeFormat: false,
          dateFormat: 'DD/M/YYYY',
          input: true,
          isValidDate: validator,
          timeConstraints: timeConstraints,
          disabled: readonly
        },
        error: self.getErrors(field),
        disabled: readonly
      };
    }
  }, {
    key: "multicheckbox",
    value: function multicheckbox(field, value, readonly) {
      var self = this;
      return {
        template: _2["default"].templates.checkbox,
        label: self.getLabel(field),
        options: field.properties.options.map(function (option) {
          return {
            value: option.value,
            text: option.label
          };
        }),
        factory: _tcombForm["default"].form.Radio,
        attrs: {
          placeholder: field.placeholder,
          disabled: readonly
        },
        error: self.getErrors(field),
        disabled: readonly
      };
    }
  }, {
    key: "radiogroup",
    value: function radiogroup(field, value, readonly) {
      var self = this;
      return {
        template: _2["default"].templates.radio,
        label: self.getLabel(field),
        options: field.properties.options.map(function (option) {
          return {
            value: option.value,
            text: option.label
          };
        }),
        factory: _tcombForm["default"].form.Radio,
        attrs: {
          placeholder: field.placeholder,
          disabled: readonly
        },
        error: self.getErrors(field),
        disabled: readonly
      };
    }
  }, {
    key: "selectmenu",
    value: function selectmenu(field, value, readonly) {
      var self = this;
      var schema = {
        label: self.getLabel(field),
        template: _2["default"].templates.select,
        options: field.properties.options,
        factory: _tcombForm["default"].form.Select,
        attrs: {
          placeholder: field.placeholder,
          disabled: readonly
        },
        error: self.getErrors(field),
        disabled: readonly
      };

      if (field.properties.multiple === true) {
        schema.attrs.multiselect = true;
        schema.transformer = _2["default"].transformers.listTransformer;
      }

      return schema;
    }
  }, {
    key: "scale",
    value: function scale(field, value, readonly) {
      var self = this;
      return {
        template: _2["default"].templates.scale,
        label: self.getLabel(field),
        options: field.properties.options.map(function (option) {
          return {
            value: option.value,
            text: option.label
          };
        }),
        factory: _tcombForm["default"].form.Radio,
        attrs: {
          placeholder: field.placeholder,
          disabled: readonly
        },
        error: self.getErrors(field),
        disabled: readonly
      };
    }
  }, {
    key: "majorClientsItemTemplate",
    value: function majorClientsItemTemplate(locals) {
      return _react["default"].createElement("div", null, _react["default"].createElement("div", {
        className: "row"
      }, _react["default"].createElement("div", {
        className: "col-xs-6"
      }, locals.inputs.clientName), _react["default"].createElement("div", {
        className: "col-xs-6"
      }, locals.inputs.clientContribution)));
    }
  }, {
    key: "majorClientsTemplate",
    value: function majorClientsTemplate(locals) {
      return _react["default"].createElement("div", {
        className: "observationTableEdit"
      }, _react["default"].createElement("div", {
        className: "row m-b-5"
      }, _react["default"].createElement("div", {
        className: "col-xs-6 columnTitle"
      }, _react["default"].createElement("strong", null, "Name")), _react["default"].createElement("div", {
        className: "col-xs-6 columnTitle"
      }, _react["default"].createElement("strong", null, "Contribution"))), locals.items.map(function (item, index) {
        return _react["default"].createElement("div", {
          key: "major_clients_input_".concat(index + 1),
          className: "inputFields"
        }, _react["default"].createElement("div", {
          className: "inputPan"
        }, item.input));
      }), _react["default"].createElement("div", {
        className: "text-right m-b-20"
      }, _react["default"].createElement("button", {
        type: "button",
        className: "btn btn-info",
        onClick: locals.add.click
      }, locals.add.label)));
    }
  }, {
    key: "turnoverDetailsItemTemplate",
    value: function turnoverDetailsItemTemplate(locals) {
      return _react["default"].createElement("div", null, _react["default"].createElement("div", {
        className: "row"
      }, _react["default"].createElement("div", {
        className: "col-xs-6"
      }, locals.inputs.financialYear), _react["default"].createElement("div", {
        className: "col-xs-6"
      }, locals.inputs.turnover)));
    }
  }, {
    key: "turnoverDetailsTemplate",
    value: function turnoverDetailsTemplate(locals) {
      return _react["default"].createElement("div", {
        className: "observationTableEdit"
      }, _react["default"].createElement("div", {
        className: "row m-b-5"
      }, _react["default"].createElement("div", {
        className: "col-xs-6 columnTitle"
      }, _react["default"].createElement("strong", null, "Financial Year")), _react["default"].createElement("div", {
        className: "col-xs-6 columnTitle"
      }, _react["default"].createElement("strong", null, "Turnover (in lacs)"))), locals.items.map(function (item, index) {
        return _react["default"].createElement("div", {
          key: "turnover_details_input_".concat(index + 1),
          className: "inputFields"
        }, _react["default"].createElement("div", {
          className: "inputPan"
        }, item.input));
      }), _react["default"].createElement("div", {
        className: "text-right m-b-20"
      }, _react["default"].createElement("button", {
        type: "button",
        className: "btn btn-info",
        onClick: locals.add.click
      }, locals.add.label)));
    }
  }, {
    key: "majorSuppliersItemTemplate",
    value: function majorSuppliersItemTemplate(locals) {
      return _react["default"].createElement("div", null, _react["default"].createElement("div", {
        className: "row"
      }, _react["default"].createElement("div", {
        className: "col-xs-6"
      }, locals.inputs.supplierName)));
    }
  }, {
    key: "majorSuppliersTemplate",
    value: function majorSuppliersTemplate(locals) {
      return _react["default"].createElement("div", {
        className: "observationTableEdit"
      }, _react["default"].createElement("div", {
        className: "row m-b-5"
      }, _react["default"].createElement("div", {
        className: "col-xs-6 columnTitle"
      }, _react["default"].createElement("strong", null, "Supplier Name"))), locals.items.map(function (item, index) {
        return _react["default"].createElement("div", {
          key: "major_suppliers_input_".concat(index + 1),
          className: "inputFields"
        }, _react["default"].createElement("div", {
          className: "inputPan"
        }, item.input));
      }), _react["default"].createElement("div", {
        className: "text-right m-b-20"
      }, _react["default"].createElement("button", {
        type: "button",
        className: "btn btn-info",
        onClick: locals.add.click
      }, locals.add.label)));
    }
  }, {
    key: "majorRawMaterialsItemTemplate",
    value: function majorRawMaterialsItemTemplate(locals) {
      return _react["default"].createElement("div", null, _react["default"].createElement("div", {
        className: "row"
      }, _react["default"].createElement("div", {
        className: "col-xs-4"
      }, locals.inputs.material), _react["default"].createElement("div", {
        className: "col-xs-4"
      }, locals.inputs.quantity), _react["default"].createElement("div", {
        className: "col-xs-4"
      }, locals.inputs.units)));
    }
  }, {
    key: "manufacturedProductItemTemplate",
    value: function manufacturedProductItemTemplate(locals) {
      return _react["default"].createElement("div", null, _react["default"].createElement("div", {
        className: "row"
      }, _react["default"].createElement("div", {
        className: "col-xs-4"
      }, locals.inputs.product), _react["default"].createElement("div", {
        className: "col-xs-4"
      }, locals.inputs.endIndustry), _react["default"].createElement("div", {
        className: "col-xs-4"
      }, locals.inputs.manufacturingCycle)));
    }
  }, {
    key: "majorRawMaterialsTemplate",
    value: function majorRawMaterialsTemplate(locals) {
      return _react["default"].createElement("div", {
        className: "observationTableEdit"
      }, _react["default"].createElement("div", {
        className: "row m-b-5"
      }, _react["default"].createElement("div", {
        className: "col-xs-4 columnTitle"
      }, _react["default"].createElement("strong", null, "Raw Material")), _react["default"].createElement("div", {
        className: "col-xs-4 columnTitle"
      }, _react["default"].createElement("strong", null, "Quantity")), _react["default"].createElement("div", {
        className: "col-xs-4 columnTitle"
      }, _react["default"].createElement("strong", null, "Units"))), locals.items.map(function (item, index) {
        return _react["default"].createElement("div", {
          key: "major_raw_materials_input_".concat(index + 1)
        }, item.input);
      }), _react["default"].createElement("div", {
        className: "text-right m-b-20"
      }, _react["default"].createElement("button", {
        type: "button",
        className: "btn btn-info",
        onClick: locals.add.click
      }, locals.add.label)));
    }
  }, {
    key: "manufacturedProductTemplate",
    value: function manufacturedProductTemplate(locals) {
      return _react["default"].createElement("div", {
        className: "observationTableEdit"
      }, _react["default"].createElement("div", {
        className: "row m-b-5"
      }, _react["default"].createElement("div", {
        className: "col-xs-4 columnTitle"
      }, _react["default"].createElement("strong", null, "Product")), _react["default"].createElement("div", {
        className: "col-xs-4 columnTitle"
      }, _react["default"].createElement("strong", null, "End Industry")), _react["default"].createElement("div", {
        className: "col-xs-4 columnTitle"
      }, _react["default"].createElement("strong", null, "Manufacturing Cycle"))), locals.items.map(function (item, index) {
        return _react["default"].createElement("div", {
          key: "manufactured_product_".concat(index + 1)
        }, item.input);
      }), _react["default"].createElement("div", {
        className: "text-right m-b-20"
      }, _react["default"].createElement("button", {
        type: "button",
        className: "btn btn-info",
        onClick: locals.add.click
      }, locals.add.label)));
    }
  }, {
    key: "customwidget",
    value: function customwidget(field, value, fieldOptions, readonly) {
      var self = this;
      var widgetName = field.properties.widgetName;
      var template;
      var item;
      var attrs;
      var factory;
      var options;

      switch (widgetName) {
        case 'BANK_NAME_AUTOCOMPLETE':
          template = _2["default"].templates.select;
          options = []; // For autocompelete initialize the options with the filled value

          if (!_common["default"].isUndefinedOrNullOrEmpty(value)) {
            if (value instanceof Array) {
              options = [{
                value: value[0],
                label: value[0]
              }];
            }
          }

          factory = _tcombForm["default"].form.Select;
          attrs = {
            disabled: readonly,
            reloadOptions: true,
            cache: false,
            placeholder: field.placeholder,
            clearable: false,
            loadOptions: function loadOptions(input, callback) {
              if (!_common["default"].isStringAndNotEmpty(input)) {
                callback(options); // return;
              }
            }
          };
          break;

        case 'BANK_ACCOUNT_AUTOCOMPLETE':
          template = _2["default"].templates.select;
          options = fieldOptions.BANK_ACCOUNT_AUTOCOMPLETE || [];
          factory = _tcombForm["default"].form.Select;
          attrs = {
            disabled: readonly,
            reloadOptions: true,
            cache: false,
            placeholder: field.placeholder,
            clearable: false
          };
          break;

        case 'major_clients':
          template = Util.majorClientsTemplate;
          item = {
            template: this.majorClientsItemTemplate,
            fields: {
              clientName: {
                template: _2["default"].templates.textbox,
                label: 'Client Name',
                attrs: {
                  placeholder: 'Name'
                }
              },
              clientContribution: {
                template: _2["default"].templates.textbox,
                label: 'Contribution',
                attrs: {
                  placeholder: '(in percent)'
                },
                error: 'Please enter a valid percentage'
              }
            }
          };
          attrs = {
            disabled: readonly,
            reloadOptions: true,
            cache: false,
            placeholder: field.placeholder,
            clearable: false
          };
          break;

        case 'turnover_details':
          template = Util.turnoverDetailsTemplate;
          item = {
            template: this.turnoverDetailsItemTemplate,
            fields: {
              financialYear: {
                template: _2["default"].templates.select,
                label: 'Financial Year',
                factory: _tcombForm["default"].form.Select,
                options: field.properties.widgetProperties.financialYears,
                attrs: {
                  placeholder: 'Year'
                }
              },
              turnover: {
                template: _2["default"].templates.textbox,
                label: 'Turnover',
                attrs: {
                  placeholder: '(in lacs)'
                },
                error: 'Please enter a valid amount'
              }
            }
          };
          attrs = {
            disabled: readonly,
            reloadOptions: true,
            cache: false,
            placeholder: field.placeholder,
            clearable: false
          };
          break;

        case 'major_suppliers':
          template = Util.majorSuppliersTemplate;
          item = {
            template: this.majorSuppliersItemTemplate,
            fields: {
              supplierName: {
                template: _2["default"].templates.textbox,
                label: 'Supplier Name',
                attrs: {
                  placeholder: 'Name'
                }
              }
            }
          };
          attrs = {
            disabled: readonly,
            reloadOptions: true,
            cache: false,
            placeholder: field.placeholder,
            clearable: false
          };
          break;

        case 'major_raw_materials_and_quantum_of_purchases':
          template = Util.majorRawMaterialsTemplate;
          item = {
            template: this.majorRawMaterialsItemTemplate,
            fields: {
              material: {
                template: _2["default"].templates.textbox,
                label: 'Raw Material'
              },
              quantity: {
                template: _2["default"].templates.textbox,
                label: 'Quantity',
                error: 'Please enter a valid quantity'
              },
              units: {
                template: _2["default"].templates.textbox,
                label: 'Units'
              }
            }
          };
          attrs = {
            disabled: readonly,
            reloadOptions: true,
            cache: false,
            placeholder: field.placeholder,
            clearable: false
          };
          break;

        case 'manufactured_products':
          template = Util.manufacturedProductTemplate;
          item = {
            template: this.manufacturedProductItemTemplate,
            fields: {
              product: {
                template: _2["default"].templates.textbox,
                label: 'Product'
              },
              endIndustry: {
                template: _2["default"].templates.textbox,
                label: 'End Industry',
                error: 'Please enter a valid quantity'
              },
              manufacturingCycle: {
                template: _2["default"].templates.textbox,
                label: 'Manufacturing Cycle'
              }
            }
          };
          attrs = {
            disabled: readonly,
            reloadOptions: true,
            cache: false,
            placeholder: field.placeholder,
            clearable: false
          };
          break;

        default:
          break;
      }

      return {
        label: self.getLabel(field),
        template: template,
        item: item,
        options: options,
        attrs: attrs,
        factory: factory,
        error: self.getErrors(field)
      };
    }
  }, {
    key: "getLabel",
    value: function getLabel(field) {
      if (field.required) {
        return "".concat(field.label, " *");
      }

      return field.label;
    }
  }, {
    key: "getErrors",
    value: function getErrors(field) {
      return function (value) {
        var errors = field.errors || {};
        var properties = field.properties; // richText

        if (field.type === _constants.COMMON.FIELD_TYPE.RICH_TEXT && field.required && _common["default"].isRichTextEmpty(value)) {
          var _message = 'Required field';

          if (!_common["default"].isUndefinedOrNullOrEmpty(field.errors)) {
            _message = errors[_constants.COMMON.ERROR_TYPE.REQUIRED] || _message;
          }

          return _message;
        } // required


        if (field.required && _common["default"].isUndefinedOrNullOrEmpty(value)) {
          var _message2 = 'Required field';

          if (!_common["default"].isUndefinedOrNullOrEmpty(field.errors)) {
            _message2 = errors[_constants.COMMON.ERROR_TYPE.REQUIRED] || _message2;
          }

          return _message2;
        }

        if (!properties) {
          return null;
        } // patter


        var message = 'Validation failed';

        if (!_common["default"].isUndefinedOrNullOrEmpty(field.properties.pattern)) {
          var regex = new RegExp(properties.pattern, 'i');

          if (!regex.test(value)) {
            if (!_common["default"].isUndefinedOrNullOrEmpty(field.errors)) {
              message = field.errors[_constants.COMMON.ERROR_TYPE.PATTERN] || message;
            }

            return message;
          }
        } // minlength


        if (!_common["default"].isUndefinedOrNullOrEmpty(field.properties.minLength)) {
          var minLength = Number(field.properties.minLength);

          if (value.length < +minLength) {
            if (!_common["default"].isUndefinedOrNullOrEmpty(field.errors)) {
              message = field.errors[_constants.COMMON.ERROR_TYPE.MIN_LENGTH] || "".concat(message, " Reason: Cannot be less than ").concat(minLength);
            }

            return message;
          }
        } // maxlength


        if (!_common["default"].isUndefinedOrNullOrEmpty(field.properties.maxLength)) {
          var maxLength = Number(field.properties.maxLength);

          if (value.length > +maxLength) {
            if (!_common["default"].isUndefinedOrNullOrEmpty(field.errors)) {
              message = field.errors[_constants.COMMON.ERROR_TYPE.MAX_LENGTH] || "".concat(message, " Reason: Cannot be greater than ").concat(maxLength);
            }

            return message;
          }
        } // No error messages defined


        return null;
      };
    }
  }, {
    key: "compareAnswer",
    value: function compareAnswer(field, value1, value2) {
      var self = this;

      if (_common["default"].isUndefinedOrNullOrEmpty(value1) && _common["default"].isUndefinedOrNullOrEmpty(value2)) {
        return null;
      }

      var refValue = value1 && value1.filter(function (v) {
        return v;
      }) || [];
      var targetValue = value2 && value2.filter(function (v) {
        return v;
      }) || [];

      if (_common["default"].isUndefinedOrNullOrEmptyList(refValue) && _common["default"].isUndefinedOrNullOrEmptyList(targetValue)) {
        return null;
      }

      switch (field.type) {
        case _constants.COMMON.FIELD_TYPE.TEXT_BOX:
        case _constants.COMMON.FIELD_TYPE.TEXT_AREA:
        case _constants.COMMON.FIELD_TYPE.RICH_TEXT:
        case _constants.COMMON.FIELD_TYPE.CHECKBOX:
        case _constants.COMMON.FIELD_TYPE.RADIO_GROUP:
        case _constants.COMMON.FIELD_TYPE.SELECT_MENU:
        case _constants.COMMON.FIELD_TYPE.MULTI_CHECKBOX:
        case _constants.COMMON.FIELD_TYPE.DATE_RANGE:
        case _constants.COMMON.FIELD_TYPE.DATE_PICKER:
        case _constants.COMMON.FIELD_TYPE.SCALE:
        case _constants.COMMON.FIELD_TYPE.CUSTOM_WIDGET:
          return _lodash["default"].isEqual(self.sanatizeValue(refValue), self.sanatizeValue(targetValue));

        default:
          return false;
      }
    }
  }, {
    key: "sanatizeValue",
    value: function sanatizeValue(value) {
      if (!value || !(value instanceof Array)) {
        return null;
      }

      return value.map(function (v) {
        if (!v) {
          return null;
        }

        if (typeof v === 'string') {
          return v.trim().replace(/\s+/g, ' ').toLowerCase();
        }

        return v;
      }).sort();
    }
  }]);

  return Util;
}();

exports["default"] = Util;

//# sourceMappingURL=util.js.map