"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToDo = ToDo;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _reactHelmet = require("react-helmet");

var _reselect = require("reselect");

var _redux = require("redux");

var _injectSaga = require("../../utils/injectSaga");

var _injectReducer = require("../../utils/injectReducer");

var _Loadable = _interopRequireDefault(require("./components/TodoItem/Loadable"));

var Actions = _interopRequireWildcard(require("./actions"));

var _constants = require("./constants");

var _Loadable2 = _interopRequireDefault(require("./components/TodoSearch/Loadable"));

var _Loadable3 = _interopRequireDefault(require("./components/TodoFilter/Loadable"));

var _selectors = _interopRequireWildcard(require("./selectors"));

var _reducer = _interopRequireDefault(require("./reducer"));

var _saga = _interopRequireDefault(require("./saga"));

require("./style.scss");

var _selectors2 = require("../App/selectors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 *
 * ToDo
 *
 */
function ToDo(_ref) {
  var todos = _ref.todos,
      filter = _ref.filter,
      changeStatus = _ref.changeStatus,
      changeFilter = _ref.changeFilter,
      searchQuery = _ref.searchQuery,
      setSearchQuery = _ref.setSearchQuery,
      addToDo = _ref.addToDo;
  (0, _injectReducer.useInjectReducer)({
    key: 'toDo',
    reducer: _reducer["default"]
  });
  (0, _injectSaga.useInjectSaga)({
    key: 'toDo',
    saga: _saga["default"]
  });

  var getFilteredToDos = function getFilteredToDos() {
    var filteredToDos = todos.filter(function (item) {
      return !searchQuery || item.title.indexOf(searchQuery.trim()) !== -1;
    });

    switch (filter) {
      case _constants.FILTER_COMPLETED:
        return filteredToDos.filter(function (item) {
          return item.completed === true;
        });

      case _constants.FILTER_ACTIVE:
        return filteredToDos.filter(function (item) {
          return item.completed !== true;
        });

      default:
        return filteredToDos;
    }
  };

  return _react["default"].createElement("div", {
    className: "todolist"
  }, _react["default"].createElement(_reactHelmet.Helmet, null, _react["default"].createElement("title", null, "ToDo"), _react["default"].createElement("meta", {
    name: "description",
    content: "Description of ToDo"
  })), _react["default"].createElement("header", null, _react["default"].createElement("h1", null, "Things To Do"), _react["default"].createElement(_Loadable2["default"], {
    query: searchQuery,
    setSearchQuery: setSearchQuery,
    addToDo: addToDo
  })), _react["default"].createElement(_Loadable3["default"], {
    filter: filter,
    changeFilter: changeFilter
  }), _react["default"].createElement("ul", {
    className: "list-unstyled"
  }, getFilteredToDos().map(function (item) {
    return _react["default"].createElement(_Loadable["default"], {
      key: item.id,
      data: item,
      changeStatus: changeStatus
    });
  })));
}

ToDo.propTypes = {
  todos: _propTypes["default"].arrayOf(_propTypes["default"].object).isRequired,
  changeStatus: _propTypes["default"].func.isRequired,
  changeFilter: _propTypes["default"].func.isRequired,
  filter: _propTypes["default"].string,
  searchQuery: _propTypes["default"].string,
  setSearchQuery: _propTypes["default"].func.isRequired,
  addToDo: _propTypes["default"].func.isRequired
};
ToDo.defaultProps = {
  filter: null,
  searchQuery: ''
};
var mapStateToProps = (0, _reselect.createStructuredSelector)({
  todos: (0, _selectors["default"])(),
  filter: (0, _selectors.makeSelectFilter)(),
  searchQuery: (0, _selectors.makeSelectSearchQuery)(),
  pageInfo: (0, _selectors2.makeSelectPageInfo)()
});

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return (0, _redux.bindActionCreators)(Actions, dispatch);
};

var withConnect = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps);

var _default = (0, _redux.compose)(withConnect, _react.memo)(ToDo);

exports["default"] = _default;

//# sourceMappingURL=index.js.map