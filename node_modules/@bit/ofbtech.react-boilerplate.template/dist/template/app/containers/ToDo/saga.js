"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = toDoSaga;

var _effects = require("redux-saga/effects");

var _action = require("../App/action");

var _actions = require("./actions");

var _constants = require("./constants");

var _selectors = _interopRequireDefault(require("./selectors"));

var _common = _interopRequireDefault(require("../../utils/common"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _marked =
/*#__PURE__*/
regeneratorRuntime.mark(updateStatus),
    _marked2 =
/*#__PURE__*/
regeneratorRuntime.mark(addToDo),
    _marked3 =
/*#__PURE__*/
regeneratorRuntime.mark(toDoSaga);

// to update status for specifix todo
function updateStatus(_ref) {
  var todoId, checked, todos, todosClone, findIndex;
  return regeneratorRuntime.wrap(function updateStatus$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          todoId = _ref.id, checked = _ref.checked;
          _context.next = 3;
          return (0, _effects.select)((0, _selectors["default"])());

        case 3:
          todos = _context.sent;
          _context.prev = 4;
          todosClone = _common["default"].deepCopy(todos);
          findIndex = todosClone.findIndex(function (_ref2) {
            var id = _ref2.id;
            return id === todoId;
          });
          todosClone[findIndex].completed = checked;
          _context.next = 10;
          return (0, _effects.put)((0, _actions.updateToDo)(todosClone));

        case 10:
          _context.next = 16;
          break;

        case 12:
          _context.prev = 12;
          _context.t0 = _context["catch"](4);
          _context.next = 16;
          return (0, _effects.put)((0, _action.notifyError)(_context.t0));

        case 16:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, null, [[4, 12]]);
} // to create new todo


function addToDo(_ref3) {
  var _ref3$todo, todo, todos, todosClone, newId;

  return regeneratorRuntime.wrap(function addToDo$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _ref3$todo = _ref3.todo, todo = _ref3$todo === void 0 ? '' : _ref3$todo;
          _context2.next = 3;
          return (0, _effects.select)((0, _selectors["default"])());

        case 3:
          todos = _context2.sent;
          _context2.prev = 4;
          todosClone = _common["default"].deepCopy(todos);

          if (todosClone.find(function (item) {
            return item.title === todo.trim();
          })) {
            _context2.next = 12;
            break;
          }

          newId = todosClone.length + 1;
          todosClone.unshift({
            title: todo,
            id: newId,
            userId: newId,
            completed: false
          });
          _context2.next = 11;
          return (0, _effects.put)((0, _actions.updateToDo)(todosClone));

        case 11:
          return _context2.abrupt("return");

        case 12:
          _context2.next = 14;
          return (0, _effects.put)((0, _action.notifyError)({
            message: 'ToDo is already available!'
          }));

        case 14:
          _context2.next = 20;
          break;

        case 16:
          _context2.prev = 16;
          _context2.t0 = _context2["catch"](4);
          _context2.next = 20;
          return (0, _effects.put)((0, _action.notifyError)(_context2.t0));

        case 20:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2, null, [[4, 16]]);
} // Individual exports for testing


function toDoSaga() {
  return regeneratorRuntime.wrap(function toDoSaga$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return (0, _effects.takeLatest)(_constants.CHANGE_STATUS, updateStatus);

        case 2:
          _context3.next = 4;
          return (0, _effects.takeLatest)(_constants.ADD_TODO, addToDo);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked3);
}

//# sourceMappingURL=saga.js.map