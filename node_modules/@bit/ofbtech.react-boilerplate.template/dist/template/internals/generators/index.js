"use strict";

/**
 * generator/index.js
 *
 * Exports the generators so plop knows them
 */
var fs = require('fs');

var path = require('path');

var _require = require('child_process'),
    execSync = _require.execSync;

var componentGenerator = require('./component/index.js');

var containerGenerator = require('./container/index.js');
/**
 * Every generated backup file gets this extension
 * @type {string}
 */


var BACKUPFILE_EXTENSION = 'rbgen';

module.exports = function (plop) {
  plop.setGenerator('component', componentGenerator);
  plop.setGenerator('container', containerGenerator);
  plop.addHelper('directory', function (comp) {
    try {
      fs.accessSync(path.join(__dirname, "../../app/containers/".concat(comp)), fs.F_OK);
      return "containers/".concat(comp);
    } catch (e) {
      return "components/".concat(comp);
    }
  });
  plop.addHelper('curly', function (object, open) {
    return open ? '{' : '}';
  });
  plop.setActionType('prettify', function (answers, config) {
    var folderPath = "".concat(path.join(__dirname, '/../../app/', config.path, plop.getHelper('properCase')(answers.name), '**', '**.js'));

    try {
      execSync("npm run prettify -- \"".concat(folderPath, "\""));
      return folderPath;
    } catch (err) {
      console.log('err', err);
      throw err;
    }
  });
  plop.setActionType('backup', function (answers, config) {
    try {
      fs.copyFileSync(path.join(__dirname, config.path, config.file), path.join(__dirname, config.path, "".concat(config.file, ".").concat(BACKUPFILE_EXTENSION)), 'utf8');
      return path.join(__dirname, config.path, "".concat(config.file, ".").concat(BACKUPFILE_EXTENSION));
    } catch (err) {
      console.log('err', err);
      throw err;
    }
  });
};

module.exports.BACKUPFILE_EXTENSION = BACKUPFILE_EXTENSION;

//# sourceMappingURL=index.js.map