"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/* eslint consistent-return:0 import/order:0 */
var express = require('express');

var _require = require('path'),
    resolve = _require.resolve;

var setup = require('./middlewares/frontendMiddleware');

var argv = require('./lib/argv');

var logger = require('./lib/logger');

var port = require('./lib/port');

var isDev = process.env.NODE_ENV !== 'production';
var ngrok = isDev && process.env.ENABLE_TUNNEL || argv.tunnel ? require('ngrok') : false;
var app = express(); // If you need a backend, e.g. an API, add your custom backend-specific middleware here
// app.use('/api', myApi);
// In production we need to pass these values in instead of relying on webpack

setup(app, {
  outputPath: resolve(process.cwd(), 'build'),
  publicPath: '/'
}); // get the intended host and port number, use localhost and port 3000 if not provided

var customHost = argv.host || process.env.HOST;
var host = customHost || null; // Let http.Server use its default IPv6/4 host

var prettyHost = customHost || 'localhost'; // use the gzipped bundle

app.get('*.js', function (req, res, next) {
  req.url = req.url + '.gz'; // eslint-disable-line

  res.set('Content-Encoding', 'gzip');
  next();
}); // Start your app.

app.listen(port, host,
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(err) {
    var url;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!err) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", logger.error(err.message));

          case 2:
            if (!ngrok) {
              _context.next = 15;
              break;
            }

            _context.prev = 3;
            _context.next = 6;
            return ngrok.connect(port);

          case 6:
            url = _context.sent;
            _context.next = 12;
            break;

          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](3);
            return _context.abrupt("return", logger.error(_context.t0));

          case 12:
            logger.appStarted(port, prettyHost, url);
            _context.next = 16;
            break;

          case 15:
            logger.appStarted(port, prettyHost);

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 9]]);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

//# sourceMappingURL=index.js.map