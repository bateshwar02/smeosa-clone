"use strict";

var isUndefinedOrNull = function isUndefinedOrNull(value) {
  return typeof value === 'undefined' || value === null;
};

var isUndefinedOrNullOrEmpty = function isUndefinedOrNullOrEmpty(value) {
  return isUndefinedOrNull(value) || value === '';
};

module.exports = function (req, res, next) {
  function throwError(message) {
    // res.logError(`StackTrace: ${message.stack}`);
    throw message;
  }

  (function () {
    res.locals.props = {};
    res.locals.links = [];
  })();

  res.safeStringify = function (obj, pretty) {
    var jsonString;

    if (obj instanceof Set) {
      if (pretty) {
        jsonString = JSON.stringify(Array.from(obj), null, 4);
      } else {
        jsonString = JSON.stringify(Array.from(obj));
      }
    } else if (pretty) {
      jsonString = JSON.stringify(obj, null, 4);
    } else {
      jsonString = JSON.stringify(obj);
    }

    return jsonString;
  };

  res.setProp = function (key, value) {
    if (isUndefinedOrNullOrEmpty(key)) {
      throwError("'key' is required for setting a prop.");
    }

    if (isUndefinedOrNull(res.locals.props)) {
      res.locals.props = {};
    }

    if (typeof value === 'undefined') {
      res.deleteProp(key);
      return;
    }

    res.locals.props[key] = value;
  };

  res.setProps = function (props) {
    Object.keys(props).forEach(function (key) {
      return res.setProp(key, props[key]);
    });
  };

  res.getProp = function (key) {
    if (isUndefinedOrNull(key)) {
      throwError("'key' is required for getting a prop.");
    }

    var value = res.locals.props[key];
    return value || null;
  };

  res.getProps = function () {
    return res.locals.props;
  };

  res.deleteProp = function (key) {
    return delete res.locals.props[key];
  };

  res.deleteRequestHeader = function (key) {
    var headers = res.getTemplateOnlyProp('headers');

    if (!isUndefinedOrNull(headers[key])) {
      delete headers[key];
      res.setTemplateOnlyProp('headers', headers);
    }
  };

  res.addRequestHeader = function (key, value) {
    if (isUndefinedOrNullOrEmpty(key)) {
      throwError("'key' is required while a setting header value.");
    }

    if (typeof value === 'undefined' || value === null) {
      res.deleteRequestHeader(key);
      return;
    }

    res.addEntryInServerOnlyProp('headers', {
      key: key,
      value: value
    });
  };

  res.getRequestHeaders = function () {
    var headers = res.getTemplateOnlyProp('headers');
    return headers;
  };

  res.getRequestHeader = function (key) {
    if (isUndefinedOrNullOrEmpty(key)) {
      throwError("'key' is required while a getting header value.");
    }

    var headers = res.getRequestHeaders();
    var value = headers[key];

    if (isUndefinedOrNull(value)) {
      value = null;
    }

    return value;
  };

  res.addEntryInServerOnlyProp = function (key, entry) {
    if (isUndefinedOrNullOrEmpty(key)) {
      throwError("'key' is required for adding server only value.");
    }

    var value = res.getTemplateOnlyProp(key);

    if (isUndefinedOrNull(value)) {
      value = {};
    }

    value[entry.key] = entry.value;
    res.setTemplateOnlyProp(key, value);
  };

  res.setTemplateOnlyProp = function (key, value, isStringifyRequired) {
    var shouldStringify = isStringifyRequired;

    if (isUndefinedOrNullOrEmpty(key)) {
      throwError("'key' is required for setting server only.");
    }

    if (typeof value === 'undefined') {
      res.deleteTemplateOnlyProp(key);
      return;
    }

    if (isUndefinedOrNullOrEmpty(shouldStringify)) {
      shouldStringify = true;
    }

    res.locals[key] = shouldStringify ? res.safeStringify(value) : value;
  };

  res.getTemplateOnlyProp = function (key, isParsingRequired) {
    var shouldParse = isParsingRequired;

    if (isUndefinedOrNullOrEmpty(key)) {
      throwError("'key' is required for getting server only value.");
    }

    var value = res.locals[key];

    if (value) {
      if (isUndefinedOrNullOrEmpty(shouldParse)) {
        shouldParse = true;
      }

      if (shouldParse) {
        try {
          value = JSON.parse(value);
        } catch (e) {
          res.logError("Error in template props parse -- ".concat(e));
        }
      }
    }

    return value || null;
  };

  next();
};

//# sourceMappingURL=propyMiddleware.js.map